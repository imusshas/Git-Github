git config
git config --global --list 
    [You will get an error if you haven't config git]

To config git [
    git config --global user.name "<your_name>"
    git config --global user.email "<your_email>"
]

Go to the working directory

git status  (To see if git is initialized or not)
git init (Only if status gives fatal error)
git pull origin <branch_name>
git add . (To add all untracked changes)
git add <file_name/folder_name> (To add a particular untracked change)
git rm --cached <file_name/folder_name> (To unstage)
git log (To see the commits history) [press q to exit from the log]
git commit -m <message>
git checkout branch_name/commit_head (to switch branch/commits)
git checkout -b <branch_name> (to create new branch)
git reflog (to see the HEADs up to now/you can find your non pushed commits from here)
git checkout -b recover <commit> (to recover non pushed commit on a new branch)

N.B: Every time any file is modified/created it must be added into the staging area.
git commit -a -m <message> (To skip  stage changes)git
git diff (To see what changes have been made in a file/folder)
git diff --staged (To see the changes in the staged area which are not been commited)
git branch -M <branch_name> (To create a new branch)
ssh-keygen -o (For one machine it is needed to be done for once)

[
    cd
    cd .ssh
    ls -a
    cat id_rsa.pub
]

git remote add origin <SSH_link> (To connect a remote github repository with the machine's local repository)

git push -u origin <branch_name> (To push local repository to remote repository)
git push -f origin <branch_name> (To push forcefully. This will override all the works in the remote repository.)
git push origin <branch_name>
git remote -v (To fetch & push)

Working with tag [
    What is a tag?
    Ans: When we have an application that is useable we release a version of it. It's called a tag


    git tag
    Annotated Tagging [
        git tag -a <version_number> -m <message> (To add a tag)
        git show <version_number> (To see the tag)
    ]
    Lightweight Tagging []
]

Working with branch [
    git branch <branch_name> (To create a branch)
    git branch <branch_name> <source_branch_name>
    git branch --set-upstream origin <branch_name> (to publish a local branch on the remote repository)
    git switch <branch_name> (To switch between branches)
    git switch -c <branch_name> (To create a branch & switch to it)
    git branch (To see the branches)
    git branch --all (To see all the branch with remote & local)
    git branch -d <branch_name> (To delete a branch)
    git branch -D <branch_name> (To delete a unmerged branch)
]

Working with merge [
    To merge you must first switch to the main branch ->
        git merge <branch_name>
] 